#!/usr/bin/env python
import json
import logging
from contextlib import closing
import subprocess
import os

import requests
import pika



logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# settings.json should look something like this
# {
#     'space.deltares.nl': {
#         'host': 'hostname',
#         'username': '',
#         'password': ''
#     },
#     'scihub.esa.int': {
#         'host': 'scihub.esa.int',
#         'username': '',
#         'password': ''
#     }
# }


def iter_downloads(settings):
    host = settings['space.deltares.nl']['host']

    # get 1 message, requeue it so the main source can get it as well.
    data = {
        "count": 1,
        "requeue": False,
        "encoding": "auto",
        "truncate": 50000
    }
    # The RabbitMQ api endpoint
    # see https://raw.githack.com/rabbitmq/rabbitmq-management/rabbitmq_v3_5_4/priv/www/api/index.html
    url = 'http://{host}:15672/api/queues/%2F/crisis_download_requests/get'.format(
        host=host
    )
    # Get the latest download request
    response = requests.post(url,
                             data=json.dumps(data),
                             auth=(
                                 settings['space.deltares.nl']['username'],
                                 settings['space.deltares.nl']['password']
                             )
    )
    # available downloads
    downloads = response.json()

    for download in downloads:
        # the message inside the download is provided as a string, parse it
        message = json.loads(download['payload'])
        # now we can get the url that we need to download
        yield message


def download(message, settings):
    """download a sentinel image"""
    logging.info("message: %s",  message )
    identifier = message['identifier'].strip()
    # download the file
    download_url = message['download']
    download_filename = identifier + '.zip'
    # create a wget command
    command = ['wget',
               '-c',
               '--user={user}'.format(user=settings['scihub.esa.int']['username']),
               '--password={password}'.format(
                   password=settings['scihub.esa.int']['password']
               ),
               '-O{}'.format(download_filename),
               download_url
               ]
    # call wget
    # takes too long, disable for now
    # return_code = subprocess.call(command)
    return_code = 0
    if return_code:
        logger.warn('getting data failed with code: %s', return_code)
        # clean up
        try:
            os.unlink(download_filename)
        except:
            logger.exception('removing download failed')
        download_filename = None
    message['local_download_filename'] = download_filename

    icon_url = message['icon']
    icon_filename = identifier + '.png'
    # create a wget command to get the icon
    command = ['wget',
               '-c',
               '--user={user}'.format(user=settings['scihub.esa.int']['username']),
               '--password={password}'.format(
                   password=settings['scihub.esa.int']['password']
               ),
               '-O{}'.format(icon_filename),
               icon_url
               ]
    # return_code = subprocess.call(command)
    return_code = 0
    if return_code:
        logger.warn('getting icon failed with code: %s', return_code)
        # clean up
        try:
            os.unlink(icon_filename)
        except:
            logger.exception('removing icon failed')
        icon_filename = None
    message['local_icon_filename'] = icon_filename


def notify_download(message, settings):
    """notify that we have downloaded"""
    host = settings['space.deltares.nl']['host']
    credentials = pika.PlainCredentials(
        settings['space.deltares.nl']['username'],
        settings['space.deltares.nl']['password']
    )
    connection = pika.BlockingConnection(
        pika.ConnectionParameters(
            host,
            5672,
            '/',
            credentials
        )
    )

    channel = connection.channel()
    # we're publishing to an exchange and a queue
    channel.basic_publish(
        exchange='crisis_download',
        routing_key='',
        body=json.dumps(message)
    )


with open('settings.json') as f:
    settings = json.load(f)

host = settings['space.deltares.nl']['host']
credentials = pika.PlainCredentials(
    settings['space.deltares.nl']['username'],
    settings['space.deltares.nl']['password']
)
connection = pika.BlockingConnection(
    pika.ConnectionParameters(
        host,
        5672,
        '/',
        credentials
    )
)

channel = connection.channel()

# we're publishing to an exchange so that other's can listen
# to what has been downloaded
channel.exchange_declare(
    'crisis_download',
    type='fanout'
)

message = next(iter_downloads(settings))
download(message, settings)
notify_download(message, settings)
